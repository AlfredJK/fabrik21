<?php
/**
 *
 * @package fabrikar
 * @author Rob Clayburn
 * @copyright (C) Rob Clayburn
 * @license http://www.gnu.org/copyleft/gpl.html GNU/GPL
 */

// Check to ensure this file is included in Joomla!
defined('_JEXEC') or die();

//require the abstract plugin class
require_once(COM_FABRIK_FRONTEND.DS.'models'.DS.'plugin.php');
require_once(COM_FABRIK_FRONTEND.DS.'models'.DS.'validation_rule.php');

class FabrikModelSpecialchars extends FabrikModelValidationRule {

	var $_pluginName = 'specialchars';

	/** @param string classname used for formatting error messages generated by plugin */
	var $_className = 'notempty specialchars';

	/**
	 * validate the elements data against the rule
	 * @param string data to check
	 * @param object element
	 * @param int plugin sequence ref
	 * @param int repeat group count
	 * @return bol true if validation passes, false if fails
	 */

	function validate($data, &$element, $c, $repeat_count = 0)
	{
		//for multiselect elements
		if (is_array($data)) {
			$data = implode('', $data);
		}
		$params =& $this->getParams();
		$domatch = $params->get('specialchars-match', '_default','array', $c);
		$domatch = $domatch[$c];
		if ($domatch) {
			$v = $params->get('specalchars', '_default','array', $c);
			$v = explode(',', $v[$c]);
			foreach($v as $c) {
				if (strstr($data, $c)) {
					return false;
				}
			}
		}
		return true;
	}

	/**
	 *  renders admin settings
	 */

	function renderAdminSettings($elementId, &$row, &$params, $c)
	{
		$params->_counter_override = $this->_counter;
		$display =  ($this->_adminVisible) ? "display:block" : "display:none";
		$return = '<div class="page-' . $elementId . ' validationSettings" style="' . $display . '">'
		. $params->render('params', '_default', false, $c);
		$return .= '</div>';
		$return = str_replace("\r", "", $return);
		return $return;
	}

	function replace($data, &$element, $c, $repeat_count = 0)
	{

		$params =& $this->getParams();
		$domatch = $params->get('specialchars-match', '_default','array', $c);
		$domatch = $domatch[$c];
		if (!$domatch) {
			$v = $params->get($this->_pluginName .'-expression', '_default','array', $c);
			$replace = $params->get('specialchars-replacestring', '_default','array', $c);

			$replace = $replace[$c];
			if ($replace === '_default') {
				$replace = '';
			}
			$v = $params->get('specalchars', '_default','array', $c);
			$v = explode(',', $v[$c]);
			foreach ($v as $c) {
				$data = str_replace($c, $replace, $data);
			}
		}
		return $data;
	}
}
?>